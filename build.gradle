task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

class Developer {
    String id
    String name
    String url
}

ext {
    androidBuildToolsVersion = '28.0.3'
    androidCompileSdkVersion = 27
    androidTargetSdkVersion = 27
    assertJVersion = '1.7.1'
    gdxVersion = '1.9.8'
    robolectricVersion = '4.3_r2-robolectric-0'

    developers = [
            new Developer(id: 'noblemaster', name: 'Christoph Aschwanden',
                    url: "http://www.noblemaster.com"),
            new Developer(id: 'keesvandieren', name: 'Kees van Dieren',
                    url: "https://www.teachkidslanguages.com")
    ]

    libraries = [
            assertj_core                            : "org.assertj:assertj-core:1.7.1",
            jsr305                                  : 'com.google.code.findbugs:jsr305:3.0.2',
            junit                                   : 'junit:junit:4.12',
            libgdx_core                             : "com.badlogicgames.gdx:gdx:${gdxVersion}",
            libgdx_backend_android                  : "com.badlogicgames.gdx:gdx-backend-android:${gdxVersion}",
            libgdx_platform_natives_desktop         : "com.badlogicgames.gdx:gdx-platform:${gdxVersion}:natives-desktop",
            mockito_core                            : 'org.mockito:mockito-core:2.7.21',
            robovm_rt                               : "com.mobidevelop.robovm:robovm-rt:$roboVMVersion",
            robovm_cocoatouch                       : "com.mobidevelop.robovm:robovm-cocoatouch:$roboVMVersion",
            support_v4                              : "com.android.support:support-v4:25.0.0"
    ]

    isReleaseBuild = {
        return project.hasProperty("RELEASE")
    }

    isLocalBuild = {
        return project.hasProperty("LOCAL")
    }

    getLocalRepositoryUrl = {
        return project.hasProperty('LOCAL_REPOSITORY_URL') ? LOCAL_REPOSITORY_URL
                : 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
    }

    getReleaseRepositoryUrl = {
        return project.hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
                : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
    }

    getSnapshotRepositoryUrl = {
        return project.hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
                : "https://oss.sonatype.org/content/repositories/snapshots/"
    }

    getRepositoryUsername = {
        return project.hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : "$System.env.NEXUS_USERNAME"
    }

    getRepositoryPassword = {
        return project.hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : "$System.env.NEXUS_PASSWORD"
    }
}

buildscript {
    ext {
        roboVMVersion = '2.3.4'
        unmockVersion = "0.7.0"
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        mavenLocal()
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:3.2.0"
        classpath "com.mobidevelop.robovm:robovm-gradle-plugin:${roboVMVersion}"
        classpath "de.mobilej.unmock:UnMockPlugin:${unmockVersion}"
    }
}

allprojects {
    apply plugin: "eclipse"

    repositories {
        mavenLocal()
        google()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    }

    version project.getProperty('version') + (isReleaseBuild() ? "" : "-SNAPSHOT")

    tasks.withType(Sign) {
        onlyIf { isReleaseBuild() }
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
